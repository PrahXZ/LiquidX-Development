package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.specials

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.features.module.modules.movement.Speed
import net.ccbluex.liquidbounce.features.module.modules.world.BlatantScaffold
import net.ccbluex.liquidbounce.features.value.ListValue
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.Rotation
import net.ccbluex.liquidbounce.utils.RotationUtils
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.S07PacketRespawn

class UniversocraftDisabler : DisablerMode("Universocraft") {


    private val disablers = ListValue("Universocraft-Mode", arrayOf("Null", "Special"), "Special")

    private var lockRotation: Rotation? = null

    var uid = 0

    var disabled = false


    override fun onUpdate(event: UpdateEvent) {
        if (LiquidBounce.moduleManager[Speed::class.java]!!.state && !LiquidBounce.moduleManager[BlatantScaffold::class.java]!!.state) {
            val limitedRotation = RotationUtils.limitAngleChange(RotationUtils.serverRotation, Rotation(MovementUtils.movingYaw, mc.thePlayer.rotationPitch), 120F)
            RotationUtils.setTargetRotation(limitedRotation, 10)
        }
    }

    override fun onDisable() {
        lockRotation = null
        disabled = false
    }

    override fun onPacket(event: PacketEvent) {

        val packet = event.packet

        if (disablers.equals("Special")) {
            if (packet is S07PacketRespawn) {
                disabled = true
            } else if (packet is C02PacketUseEntity) {
                disabled = false
            } else if (packet is C03PacketPlayer && mc.thePlayer.ticksExisted <= 10) {
                disabled = true
            } else if (packet is C0FPacketConfirmTransaction && disabled && mc.thePlayer.ticksExisted < 350) {
                PacketUtils.sendPacketNoEvent(C13PacketPlayerAbilities())
                PacketUtils.sendPacketNoEvent(C00PacketKeepAlive(Int.MIN_VALUE))
                packet.uid = if (mc.thePlayer.ticksExisted % 2 == 0)
                        (Short.MIN_VALUE*-2).toShort()
                            else (Short.MAX_VALUE*-2).toShort()
            }
        }


        if (packet is C0FPacketConfirmTransaction) {
            when (disablers.get()) {
                "Null" -> {
                    if (mc.thePlayer.ticksExisted % 2075 < 120) {
                        PacketUtils.sendPacketNoEvent(C00PacketKeepAlive(Int.MIN_VALUE))
                        PacketUtils.sendPacketNoEvent(C13PacketPlayerAbilities())
                        packet.uid = Short.MAX_VALUE
                    }
                }
            }
        }
    }
}